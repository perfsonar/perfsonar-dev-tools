# vim: filetype=bash
#
# Common Utilities
#

WHEREAMI=$(dirname $0)
TOP="${WHEREAMI}/.."

BIN="${TOP}/bin"
LIBEXEC="${TOP}/libexec"

PATH="${WHEREAMI}:${PATH}"

# Git projects we want to release
PROJECTS=("psconfig" "pscheduler" "toolkit" "graphs" "bundles" "owamp" "perl-shared" "psTracerouteViewer" "ls-cache-daemon" "nagios" "ls-registration-daemon" "i2util" "docs" "perfsonar-testpoint-docker" "perfsonar-tools-docker" "maddash" "minor-packages" "perfsonar-repo" "sca-auth" "psconfig-web" "archive" "logstash" "elmond")

# Directories we want to ignore
FIND_IGNORE=-not\ -regex\ '.*/(unibuild-work|multiarch_build)/.*'

# Print something if stdout is a terminal
narrate()
{
    [ -t 1 ] && echo "$@"
}

# Emit a warning
warn()
{
    echo -e "\033[1;33m$@\033[0m" 1>&2
}


# Die a horrible death
die()
{
    warn "$@"
    exit 1
}

# Error handler
error() {
    echo -e "\033[1m$@\033[0m" >&2
    $v && echo -e "\033[1;31mBetter I stop now, before doing any commit to the local repo.\033[0m" >&2
    exit 1
}

# Verbose handler
verbose() {
    $v && echo -e "$@"
}


# Run find(1) in a way that supports regexps.
if [ "$(uname -s)" = "Darwin" ]
then
    # macOS requires an extra switch.
    find_re()
    {
	find -E "$@"
    }
else
    find_re()
    {
	find "$@"
    }
fi


# Find the top of a Git repo relative to the current directory or one
# specified.
repo_top()
{
    [ "$1" ] && DIR="$1" || DIR="."
    [ -d "${DIR}" ] \
	|| die "${DIR}: Not a directory."

    ABSOLUTE=$(cd "${DIR}" && pwd)

    while [ "${ABSOLUTE}" ]
    do
	if [ -d "${ABSOLUTE}/.git" ]
	then
	    echo "${ABSOLUTE}"
	    return
	fi
	ABSOLUTE=$(echo "${ABSOLUTE}" | sed -e 's|/[^/]*$||')
    done

    die "$DIR: Not in a Git repo"
}


# Find the current branch of a repository
repo_has_branch()
{
    NAME="$1"
    [ "$2" ] && DIR="$2" || DIR="."
    [ -d "${DIR}" ] \
	|| die "${DIR}: Not a directory."
    (cd "${DIR}" && git branch -l) \
	| awk '{ print $NF }' \
	| fgrep -x -q "${NAME}"
}

# Replace auto-generated version and relnum in RPM spec files
rpm_set_version()
{   
    [ "$1" ] && export MY_VERSION="$1" || die "Version not provided"
    [ "$2" ] && export MY_RELNUM="$2" || MY_RELNUM="1"
    # sed -i behaves differently on BSD, so using temporary file
    export TMP_FILE=`mktemp`
    # Update .spec version
    find_re . -type f -name "*.spec*" $FIND_IGNORE -exec sh -c 'for f do sed -E "s/%define perfsonar_auto_version[[:space:]]+.+/%define perfsonar_auto_version ${MY_VERSION}/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update .spec relnum
    find_re . -type f -name "*.spec*" $FIND_IGNORE -exec sh -c 'for f do sed -E "s/%define perfsonar_auto_relnum[[:space:]]+.+$/%define perfsonar_auto_relnum ${MY_RELNUM}/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update Makefile version
    find_re . -type f -name Makefile $FIND_IGNORE -exec sh -c 'for f do sed -E "s/PERFSONAR_AUTO_VERSION=.+/PERFSONAR_AUTO_VERSION=${MY_VERSION}/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update Makefile relnum
    find_re . -type f -name Makefile $FIND_IGNORE -exec sh -c 'for f do sed -E "s/PERFSONAR_AUTO_RELNUM=.+/PERFSONAR_AUTO_RELNUM=${MY_RELNUM}/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update configure.ac version
    find_re . -type f -name configure.ac $FIND_IGNORE -exec sh -c 'for f do sed -E "s/^AC_INIT\((owamp|I2util),[[:space:]]*[[:digit:].]+,/AC_INIT(\1, ${MY_VERSION},/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update configure.ac relnum
    find_re . -type f -name configure.ac $FIND_IGNORE -exec sh -c 'for f do sed -E "s/^AC_SUBST\(PATCH_LEVEL,[[:space:]]*[[:alnum:].]+\)/AC_SUBST(PATCH_LEVEL, ${MY_RELNUM})/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    # Update pom.xml version
    find_re . -type f -name pom.xml $FIND_IGNORE -exec sh -c 'for f do sed -E "s/<perfsonar.auto.version>.+<\/perfsonar.auto.version>/<perfsonar.auto.version>${MY_VERSION}<\/perfsonar.auto.version>/" "$f" > "$TMP_FILE"; mv "$TMP_FILE" "$f"; git add "$f"; done' find-sh {} \;
    /bin/rm -f "$TMP_FILE"
}

# Creates a new debian/changelog entry for new version
deb_set_new_version()
{
    [ "$1" ] && export VERSION="$1" || error "Version not provided"
    [ "$2" ] && RELNUM="$2" || error "Release Number not provided"
    [ "$3" ] && PREV_VERSION="$3" || error "Previous version not provided"
    if [ "0" = "${RELNUM%%.*}" ]; then
        # Starting with a "0.", that's an alpha, beta or RC
        DEB_VERSION="$VERSION~${RELNUM#*\.}"
    else
        # That's a final
        DEB_VERSION="$VERSION"
    fi
    if ! grep -qs '(native)' debian/source/format ; then
        # Only non native packages use the "-1" suffix
        DEB_VERSION="$DEB_VERSION-1"
    fi
    export TMP_FILE=`mktemp`
    PS_REPO="perfsonar-${VERSION%.*}-snapshot"
    DEB_DATE=`LANG=C date "+%a, %d %b %Y %T %z"`
    # Replace debian/changelog signature line with generic or DEBEMAIL info
    # Note: DEBEMAIL and DEBFULLNAME variables are also used by the Debian helper scripts (dh_*)
    if [ -z "$DEBEMAIL" ]; then
        DEBEMAIL="debian@perfsonar.net"
    fi
    if [ -z "$DEBFULLNAME" ]; then
        DEBFULLNAME="perfSONAR developers"
    fi

    for dir in `find_re . -type d -path *unibuild-packaging/deb $FIND_IGNORE`; do
        MYDIR="$dir"
        deb_change_changelog
    done
}

# Set debian/ dir specific files
deb_change_changelog()
{
    if [ -f "$MYDIR/changelog" ] && head -1 "$MYDIR/changelog" | grep -q "$PREV_VERSION" ; then
        # We filter on previous version so not to alter the changelog files of dependencies packages we keep in our repos (mostly in pscheduler, but not only)
        DEB_PKG=`perl -ne 'do {print $1; last} if /(^[^ ]+)/' "$MYDIR/changelog"`
        printf "$DEB_PKG ($DEB_VERSION) $PS_REPO; urgency=low\n\n  * New upstream version.\n\n -- $DEBFULLNAME <$DEBEMAIL>  $DEB_DATE\n\n" > "$TMP_FILE"
        cat "$MYDIR/changelog" >> "$TMP_FILE"
        /bin/mv "$TMP_FILE" "$MYDIR/changelog"
        git add "$MYDIR/changelog"
    fi
}

# Correct debian/changelog after a merge forward
deb_correct_changelog()
{
    if [ -f "$MYDIR/changelog" ]; then
        TMP_FILE=`mktemp`
        # Save debian/changelog changes local to this branch
        git checkout "$NEXT_VERSION" "$MYDIR/changelog"
        DEB_PKG=`perl -ne 'do {print $1; last} if /(^[^ ]+)/' "$MYDIR/changelog"`
        # Local to this branch means we drop all that is from previous MINOR
        perl -ne "print unless /$DEB_PKG \(${MINOR}/ .. eof" "$MYDIR/changelog" > "$TMP_FILE"
        # debian/changelog must always be ordered by version number (not by date)
        git checkout "$VERSION" "$MYDIR/changelog"
        # Remove any entries not yet released (i.e. not having a distro field like perfsonar-x.y)
        perl -i -ne "print if /$DEB_PKG \(.*\) perfsonar-$MINOR; / .. eof" "$MYDIR/changelog"
        # And bring back saved changes
        cat "$MYDIR/changelog" >> "$TMP_FILE"
        /bin/mv -f "$TMP_FILE" "$MYDIR/changelog"
        git add "$MYDIR/changelog"
    fi
}

