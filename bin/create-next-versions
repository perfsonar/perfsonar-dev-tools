#!/bin/sh -e
#
# Close the current branch of the current repository.
#
# Can be called with a specific version number, as:
# MYNEXTVERSIONS="4.2.3" ../perfsonar-dev-tools/bin/close-branch
# MYNEXTVERSIONS="4.2.3" ../perfsonar-dev-tools/bin/create-next-versions
#

WHEREAMI=$(dirname $0)
. "${WHEREAMI}/common"

[ "$1" ] && WHERE="$1" || WHERE="."

GIT_DIR=$(repo_top "${WHERE}")/.git
export GIT_DIR

THIS_BRANCH=$(git branch -l | awk '$1 == "*" { print $2 }')

# Create new branches from this one if they don't already exist
RELNUM="0.a1.0"

# If MYNEXTVERSIONS exists, we use it instead of the next-versions script
[ "$MYNEXTVERSIONS" ] && VERSIONS="$MYNEXTVERSIONS" || VERSIONS=$("${WHEREAMI}/next-versions" "${THIS_BRANCH}")
for VERSION in $VERSIONS
do
    VERSION="$(echo "${VERSION}" | tr -d '[:space:]')" #trim whitespace
    HAS_BRANCH=$(git branch --list -r "origin/${VERSION}")
    if [ -n "$HAS_BRANCH" ]; then
        narrate "Repo already has a branch ${VERSION}"
        # TODO: Should add a '-f' flag to force updating the versions in RPM and DEB (i.e. bypassing the continue)
        # Or says that when MYNEXTVERSIONS is set we force update?
        continue
    else
        git checkout -b "${VERSION}"
    fi
    # Make sure we don't change anything in submodules
    git submodule deinit -f .
    rpm_set_version "$VERSION" "$RELNUM" || :
    deb_set_new_version "$VERSION" "$RELNUM" || :
    git commit -m "Preparing packaging for next version: v$VERSION-$RELNUM"
    git push origin "${VERSION}"
    git branch --set-upstream-to="origin/${VERSION}" "${VERSION}"
done

