#!/usr/bin/env bash
# Usage info
show_help() {
    cat << EOF

    Usage: ${0##*/} [-fgnqv] [-r relnum] [-d debrel] VERSION

    This script releases  a  new  version  (final,  RC,  beta  or  alpha)  of  a
    perfSONAR package out of a given repository. It always  takes  an  argument:
    the VERSION to be released.

    VERSION and relnum (-r) are mandatory. If a tag is already existing for  the
    given VERSION and relnum, nothing will be done. If a debrel (-d)  is  given,
    then it will also be a Debian release (unless the corresponding  Debian  tag
    is already existing).

    When doing an alpha, beta or release candidate, the relnum must  start  with
    '0.' as described in https://github.com/perfsonar/project/wiki/Versioning
    If doing both an RPM and DEB, both relnum and debrel must be given.

    The given VERSION number is checked against the previous one  to  make  sure
    the sequence is increasing or stays the same  (but  then  relnum  or  debrel
    needs to increase).

    The RPM .spec and the deb/changelog files are automatically  modified  by
    this script. The script will create a new git commit with all changed  files
    and will add the corresponding tag. Debian quilt patches are  refreshed  and
    added to the commit as well.

    Two environment variables can be used  to  generate  the  Debian  changelog:
        - DEBEMAIL: the email mentioned in the changelog signature
        - DEBFULLNAME: the name mentioned in the changelog signature
    If those  2  variables  are  not  defined,  then  your  git  user.email  and
    user.name will be used.

    You can call this script with the following args:
        -f: force release even if version don't match branch
        -g: don't do any git action (no commit, no tag)
        -n: performs a dry-run
        -q: don't refresh quilt patches
        -v: verbose
        -r: the RPM package release number
            ex: 0.b1.1, 1, 2, 3.14
        -d: the Debian package release number
            ex: 1, 2, 1~bpo80+1

    This script should run fine on both Linux and BSD systems.
EOF
}

# Initialisations
WHEREAMI=`dirname $0`
. "${WHEREAMI}/common"
MYCWD=`pwd`

# Defaults
v=false
dry_run=false
force=false
no_git=false
quilt_refresh=true

# Parsing options
while getopts "d:fgnqr:v" OPT; do
    case $OPT in
        d) debrel=$OPTARG ;;
        f) force=true ;;
        g) no_git=true ;;
        n) dry_run=true ;;
        q) quilt_refresh=false ;;
        r) relnum=$OPTARG ;;
        v) 
            v=true
            verbose "\033[1mI'm running in verbose mode.\033[0m" ;;
        '?')
            show_help >&2
            exit 1 ;;
    esac
done
shift $((OPTIND-1))
VERSION=$1
if [[ -z "$VERSION" || -z "$relnum" ]]; then
    show_help >&2
    error "VERSION and relnum (-r) must be given to make a release."
fi

# Check current branch against version: must be the same or must be master
BRANCH=`git branch | grep \* | cut -d ' ' -f2`
if [[ "$force" == "false" && "$VERSION" != "$BRANCH" && "$BRANCH" != "master" ]]; then
    error "I cannot make the $VERSION release from branch $BRANCH"
fi

# The versions and tags need to conform to our policy detailed at https://github.com/perfsonar/project/wiki/Versioning
PKG="${PWD##*\/}"
RPM_VERSION="$VERSION-$relnum"
DEB_VERSION_DEFAULT="$VERSION"
merge_to_master=false
if [ "${relnum:0:1}" == "0" ]; then
    # That's a alpha/beta/RC
    GIT_TAG="v$VERSION-${relnum#*\.}"
    DEB_VERSION_DEFAULT="$DEB_VERSION_DEFAULT~${relnum#*\.}"
    verbose "We have an alpha, beta or candidate release."
elif [ "${relnum:0:1}" == "1" ]; then
    # That's a final
    GIT_TAG="v$VERSION"
    merge_to_master=true
    verbose "Let's celebrate, we have a final release!"
else
    # That's an RPM only final release
    GIT_TAG="v$VERSION-rpm${relnum}"
    merge_to_master=true
    verbose "We have an RPM repackaging release."
    if [ -n "$debrel" ]; then
        error "You asked for both an RPM repackaging release and a Debian repackaging release, that's not compatible.\nThat should actually be a fully new release (or a new alpha/beta/RC)."
    fi
fi

# Is the GIT_TAG already existing?
if git tag -l | grep -qE "^${GIT_TAG}$" ; then
    # Git tag is already existing it must be a Debian only release
    warn "Git tag $GIT_TAG is already existing in repository, I will not touch the RPM specfile nor any Makefile"
    if [ -z "$debrel" ]; then
        error "No Debian release asked, I'll stop here."
    fi
    verbose "This is a DEB only release."
    unset RPM_VERSION
else
    verbose "This is a dual RPM and DEB release."
    if [[ -n "$debrel" && "$debrel" != "1" ]]; then
        error "For a dual RPM and DEB release, debrel must be 1 as it's the first package release for this version."
    else
        debrel=1
    fi
fi

# Checks need to be on the $VERSION branch
git checkout $VERSION
git pull
# Make sure we don't change anything in submodules
git submodule deinit -f .
# TODO: how can we re-init submodules that were present at first?
BRANCH=`git branch | grep \* | cut -d ' ' -f2`
DEBIAN_TAG='' #last pkg will set this

#HACK: Skip minor packages until we can autodetect whether this script should update version
if [[ "$PKG" == "minor-packages" ]]; then
    echo "No changes to debian for minor packages"
    debrel=""
fi

# Check all is fine and prepare for the Debian release
if [ -n "$debrel" ]; then
    #HACK: Ignore external pscheduler packages with versions we want to leave alone
    directories=( $(find -E . -type d -path \*/unibuild-packaging/deb $FIND_IGNORE ) )
    if [[ "$PKG" == "pscheduler" ]]; then
        directories=( \
            $(find -E . -type d -path \*pscheduler-\*/\*unibuild-packaging/deb $FIND_IGNORE ) \
            $(find -E . -type d -path \*python-pscheduler/\*unibuild-packaging/deb $FIND_IGNORE ) \
        )
    fi
    for dir in ${directories[@]}; do
        echo ""
        echo "Processing $dir"
        cd "$MYCWD"
        cd $dir/..
        echo "$PWD"
        DEB_PKG=`awk 'NR==1 {print $1}' deb/changelog`
        if [[ -f deb/changelog ]]; then
            verbose "$dir/deb/changelog is present, that's a good start."
        else
            error "$dir doesn't look like a Debian packaging tree, I cannot find deb/changelog"
        fi
        if grep -qs '(native)' deb/source/format ; then
            if [ -n "$RPM_VERSION" ]; then
                verbose "That's a Debian native package, we will not use the debrel (-$debrel)"
                DEB_VERSION="${DEB_VERSION_DEFAULT}"
            else
                DEB_VERSION="${DEB_VERSION_DEFAULT}.${debrel}"
                verbose "That's a Debian native package and Debian only subrelease (.$debrel)"
            fi
        else
            DEB_VERSION="$DEB_VERSION_DEFAULT-$debrel"
        fi

        # Preparing debian git tag (~ are not allowed)
        DEBIAN_TAG="deb/${DEB_VERSION/\~bpo/_bpo}"
        DEBIAN_TAG="${DEBIAN_TAG/\~/-}"
        # Check there is not an already existing Debian tag
        if git tag -l | grep -q "^${DEBIAN_TAG}$" ; then
            error "$DEBIAN_TAG is already existing in this repository."
        fi

         # Preparing deb/changelog
        DEB_CHANGELOG="$DEB_PKG ($DEB_VERSION) perfsonar-${VERSION%.*}; urgency=low"
        # If it's a DEB only release
        if [ -z "$RPM_VERSION" ]; then
            # Check if there are no source code difference between the GIT_TAG and the DEBIAN_TAG
            if git diff --name-only $GIT_TAG -- | grep -Ev "/unibuild-packaging/deb/"; then
                error "There are source code changes between $GIT_TAG and proposed Debian release. This will break the Debian build."
            fi
        fi

        # Replace deb/changelog signature line with commiter or DEBEMAIL info
        # Note: DEBEMAIL and DEBFULLNAME variables are also used by the Debian helper scripts (dh_*)
        if [ -z "$DEBEMAIL" ]; then
            DEBEMAIL="debian@perfsonar.net"
        fi
        if [ -z "$DEBFULLNAME" ]; then
            DEBFULLNAME="perfSONAR developers"
        fi
        # We use a date format that is working on both Linux and BSD
        DATE=`LANG=C date "+%a, %d %b %Y %T %z"`
        FINISH_LINE=" -- ${DEBFULLNAME} <${DEBEMAIL}>  ${DATE}"
        verbose "The deb/changelog header will be:"
        verbose "$DEB_CHANGELOG"
        verbose "The Debian package signature line will be:"
        # Cannot use verbose here as it will strip the extra spaces required by Debian
        $v && printf "${FINISH_LINE}\n"
        echo -e "The Debian release will be tagged as \033[1;32m${DEBIAN_TAG}\033[0m."
        # Final call before take off
        echo -e "I'll now prepare to release version \033[1;32m$VERSION\033[0m of \033[1;32m$DEB_PKG\033[0m"
        echo -e "TAG: \033[1m$GIT_TAG\033[0m | RPM: \033[1m$RPM_VERSION\033[0m | DEB: \033[1m$DEB_VERSION\033[0m"
        if $dry_run ; then
            if [[ $quilt_refresh && -d deb/patches ]]; then
                verbose "We will try to refresh Debian quilt patches to match current repository content."
            fi
            v=true
            verbose "\033[1mThis is a dry run, I haven't touched a thing.\033[0m"
            exit
        fi

        # Do the actual DEB changes
        echo -e "\033[1mDEB Processing in progress…\033[0m"
        # Loop on each directories

        # Refresh quilt patches if needed (if a refresh is not possible, this will stop and manual correction should happen)
        if [[ $quilt_refresh && -s deb/patches/series ]]; then
            UNIBUILD_PKG_PATH="."
            if [ "${PWD##*/}" == "unibuild-packaging" ]; then
                pushd ..
                UNIBUILD_PKG_PATH="./unibuild-packaging"
            fi
            verbose "Trying to refresh quilt patches to latest merge."
            export QUILT_PATCHES="${UNIBUILD_PKG_PATH}/deb/patches"
            export QUILT_REFRESH_ARGS="-p ab --no-index"
            [ -f .pc/applied-patches ] && error "Quilt state is not clean, check your .pc directory. Cannot continue"
            quilt --quiltrc - push -aq --refresh > /dev/null
            [ $? -eq 0 ] || quilt --quiltrc - push -aq --refresh || error "Something went wrong trying to refresh the quilt patches."
            quilt pop -aq > /dev/null
            [ $? -eq 0 ] || error "Something went wrong trying to reverse the quilt patches."
            git add "${UNIBUILD_PKG_PATH}/deb/patches"
            if [ "${UNIBUILD_PKG_PATH}" != "." ]; then
                popd
            fi
        fi

        # Update the deb/changelog file
        n=`grep -nm 1 " -- " deb/changelog | awk -F ':' '{print $1}'`
        TMP_FILE=`mktemp`
        sed "${n}s/^ -- .* [+-][0-9]\{4\}/${FINISH_LINE}/" deb/changelog > "$TMP_FILE"
        echo "$DEB_CHANGELOG" > deb/changelog
        tail -n +2 "$TMP_FILE" >> deb/changelog
        /bin/rm "$TMP_FILE"
        git add deb/changelog
    done
else
    unset DEB_VERSION
    echo
fi
cd "$MYCWD"

if [ -n "$RPM_VERSION" ]; then
    # Do the actual RPM changes
    echo -e "\033[1mRPM Processing in progress…\033[0m"
    rpm_set_version "$VERSION" "$relnum"
fi


# Check if there are no pending changes in the repository
if git status --porcelain | grep -E '^.[^ ] '; then
    error "There are modified files not stagged for commit in this repository, what shall we do with those?"
fi

if $no_git ; then
    # Or just return the version and the tags to be used to do a manual commit
    echo "Everthing's ready for releasing $PKG $VERSION"
    echo -e "TAG: \033[1m$GIT_TAG\033[0m | RPM: \033[1m$RPM_VERSION\033[0m | DEB: \033[1m$DEB_VERSION\033[0m"
    echo "But nothing was added/commited to the git repository."
    echo "You can run the script again without the -g switch to do the commit and tagging this time."
else
    # Perform the git commit and add the tags
    echo
    GITMSG="Releasing $PKG"
    if [ -n "$RPM_VERSION" ]; then
        GITMSG="$GITMSG - RPM $RPM_VERSION"
    fi
    if [ -n "$DEB_VERSION" ]; then
        GITMSG="$GITMSG - DEB $DEB_VERSION"
    fi
    git commit -m "$GITMSG"
    
    if $merge_to_master; then
        # Switch to master and merge, only for final releases
        git checkout master
        git pull
        git merge $VERSION
    fi
    
    # Adding tags
    if [ -n "$RPM_VERSION" ]; then
        git tag "${GIT_TAG}"
    fi
    if [ -n "$DEB_VERSION" ]; then
        # TODO: we should do this only if this is a Debian repackage (-2)
        # TODO: and we should enable the possibility to do it for RPM too
        git tag "${DEBIAN_TAG}"
    fi
    echo "If you're happy with the commit and tag(s) above, you just need to push that away!"
fi

