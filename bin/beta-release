#!/bin/sh -e
#
# Perform functions on branches for doing beta releases
# 

WHEREAMI=$(dirname $0)
. "${WHEREAMI}/common"

#Get version from parameter
VERSION=$1
if [ -z "$VERSION" ]; then
    die "Must specify VERSION as command-line option"
fi

#Get relnum from parameter
RELNUM=$2
if [ -z "$RELNUM" ]; then
    die "Must specify RELNUM as second command-line option"
fi
if [[ $RELNUM != 0.* ]]; then
    die "Relnum must start with \"0.\" (example: 0.1.b1)"
fi

#make temp dir
TEMPDIR=`mktemp -d`
narrate "Creating workspace in $TEMPDIR"

#list project
for PROJECT in "${PROJECTS[@]}"
do
    cd $TEMPDIR
    # checkout clean copy
    narrate ""
    narrate "[${PROJECT}]"
    GIT_URL="https://github.com/perfsonar/${PROJECT}"
    narrate "Downloading $GIT_URL"
    git clone $GIT_URL $PROJECT
    
    #get branch
    cd $PROJECT
    git fetch
    narrate "Fetching branch ${VERSION}"
    HAS_BRANCH=$(git branch --list -r origin/${VERSION})
    if [ -z $HAS_BRANCH ]; then
        warn "$PROJECT does not contain branch $VERSION, skipping"
        continue
    fi
    
    # checkout branches since git sometimes needs this to merge
    git checkout $VERSION
    
    #Update .spec version
    rpm_set_version $VERSION $RELNUM || continue
    git push
        
    # tag the branch
    NEW_TAG="v${VERSION}-${RELNUM}"
    HAS_TAG=$(git tag --list ${NEW_TAG})
    if [ -z "$HAS_TAG" ]; then
        git tag $NEW_TAG
        git push --tags
    fi
done

#Clean-up TEMPDIR
echo ""
rm -rf $TEMPDIR
echo "[SUCCESS]"