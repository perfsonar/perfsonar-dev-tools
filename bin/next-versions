#!/usr/bin/env python
#
# For a given version number, calculate the set of next-possible
# versions.
#
# Usage: next-versions VERSION-NUMBER
#
# Where VERSION-NUMBER is an all-numeric version number (e.g., 1.2.3)
#

import optparse
import sys


def fail(message):
    sys.stderr.write(message.strip() + '\n')
    exit(1)

#
# Gargle the arguments
#

opt_parser = optparse.OptionParser(
    usage="Usage: %prog [options] version",
)

opt_parser.disable_interspersed_args()

opt_parser.add_option("--max-parts",
                      help="Maximum number of parts in a version number (default 3)",
                      default=3,
                      action="store", type="int",
                      dest="max_parts")

opt_parser.add_option("--semantic",
                      help="Pad short versions with zeros (Default)",
                      default=True,
                      action="store_true",
                      dest="semantic")

opt_parser.add_option("--no-semantic",
                      help="Don't pad short versions with zeros",
                      action="store_false",
                      dest="semantic")
                      
opt_parser.add_option("--major",
                      help="Include the major version number",
                      default=False,
                      action="store_true",
                      dest="major")
                      
opt_parser.add_option("--no-major",
                      help="Don't include the major version number (Default)",
                      action="store_false",
                      dest="major")

(options, remaining_args) = opt_parser.parse_args()


if len(remaining_args) != 1:
    opt_parser.print_usage()
    exit(1)

version = remaining_args[0]

max_parts = options.max_parts
if max_parts < 1:
    print "Max parts must be positive"
    exit(1)

semantic = options.semantic


try:
    parts = [ int(part) for part in version.split(".") ]
except ValueError:
    fail("Invalid version '{0}'".format(version))

if len(parts) > max_parts:
    fail("Version is too long (maximum {0} parts)".format(max_parts))


if semantic:
    parts.extend([0] * (max_parts - len(parts)))

while parts:
    parts[-1] = parts[-1] + 1

    out_array = parts
    if semantic:
        out_array = out_array + [0] * (max_parts - len(parts))

    print ".".join([str(part) for part in out_array])

    parts = parts[:-1]
    #skip major version number unless otherwise specified
    if not options.major and len(parts) == 1:
        break
        


exit(0)
