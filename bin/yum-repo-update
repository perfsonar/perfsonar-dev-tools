#!/bin/bash

#Updates directories and symlinks in yum repo to point at desired release

#Version required
VERSION=$1
if [ -z "$VERSION" ]; then
    echo "Must specify VERSION as command-line option" 1>&2
    exit 1
fi

#handle optional parent directory
BASE_PATH="$2"
if [ -n "$BASE_PATH" ]; then
    cd $BASE_PATH
fi 

#get optional repo name
REPO="$3"

# Utility function for creating and updating symlinks to point at new versions
creatsymlinks () {
    local target=$1
    local current=$2
    local next=$3
    local next2=$4
    local next3=$5
    if [ ! -L "$target" ]; then
        #if doesn't exist, create it
        ln -s "$current" "$target"
    elif [ ! -d "$next" ] && [ -z "$next2" -o ! -d "$next2" ] && [ -z "$next3" -o ! -d "$next3" ]; then
        #if exists but next version does not, assume we are newest
        unlink "$target"
        ln -s "$current" "$target"
    fi
}

# Primary function that analyzes version and repo to determine what changes to
#  make in the filesystem
checkver () {
    local IFS=.
    local i ver=($1) repo=$2
    # fill empty fields in ver1 with zeros
    for ((i=${#ver[@]}; i<3; i++))
    do
        ver[i]=0
    done
    
    #set version values
    major=${ver[0]}
    minor=${ver[1]}
    patch=${ver[2]}
    next_major=$((major + 1))
    next_minor=$((minor + 1))
    next_patch=$((patch + 1))

    #create directory if not exists
    mkdir -p "$major.$minor.$patch/packages"
    mkdir -p "$major.$minor.$patch/backports"
    
    #create minor version symlink
    creatsymlinks "$major.$minor" "$major.$minor.$patch" "$major.$minor.$next_patch"
    #create major symlink
    creatsymlinks "$major" "$major.$minor.$patch" "$major.$next_minor.0" "$major.$minor.$next_patch"
    #create latest symlink
    creatsymlinks "latest" "$major.$minor.$patch" "$next_major.0.0" "$major.$next_minor" "$major.$minor.$next_patch"
    #create special nightly symlinks
    if [ "$repo" == "nightly" ]; then
        creatsymlinks "minor" "$major.$minor.$patch" "$major.$next_minor.0" "$major.$minor.$next_patch"
        
        #update patch if next minor exists and this is newest patch
        # below handles issues when we build more then two minor versions back
        next_next_minor=$((next_minor + 1))
        if [ ! -e "patch" ]; then
            #if patch does not exist, then create it
            creatsymlinks "patch" "$major.$minor.$patch" "$major.$minor.$next_patch"
        elif [ -e "$major.$next_minor.0" ] && [ ! -e "$major.$next_next_minor.0" ]; then
            #patch always points to the latest revision that is one version back
            creatsymlinks "patch" "$major.$minor.$patch" "$major.$minor.$next_patch"
        fi
    fi
}

checkver $VERSION $REPO
