#!/usr/bin/env bash
#
# Merge an new patch release into an existing higher version branch
# We must be on the higher branch to run this
#
# Usage (if b>d):
#   git checkout a.b.c
#   ../perfsonar-dev-tools/bin/merge-repo-forward a.d.e
# 

WHEREAMI=$(dirname $0)
. "${WHEREAMI}/common"
MYCWD=`pwd`

# Get version parameter
VERSION=$1
if [ -z "$VERSION" ]; then
    die "Must specify VERSION as command-line option"
fi

# Initialisations
GITREPO="${PWD##*\/}"
MINOR=${VERSION%.*}
NEXT_VERSION=`git branch | grep \* | cut -d ' ' -f2`
if [[ $VERSION > $NEXT_VERSION ]]; then
    die "Current branch ($NEXT_VERSION) is lower than $VERSION"
fi

# Check what we need to merge
if git tag -l | grep -qE "^v${VERSION}$"; then
    # Get most recent tag from VERSION
    echo "A git tag (v${VERSION}) already exists from branch ${VERSION}, I'll be merging the tag."
    TAG=`git tag -l --sort=-creatordate "v$VERSION*" "deb/$VERSION*" "rpm/$VERSION*" | head -1`
else
    echo "No tag found, I'll do a direct merge from $VERSION."
fi

# RPM files
SPECFILES=`find -E . -type f -name "*.spec*" $FIND_IGNORE`
MAKEFILES=`find -E . -type f -name Makefile $FIND_IGNORE`
CONFFILES=`find -E . -type f -name configure.ac $FIND_IGNORE`

# TODO: does this work when merging a non released branch?
# Try to merge patch branch into minor branch
if git merge -m "Merging $VERSION into $NEXT_VERSION" $VERSION; then
    # All is fine!
    exit 0
else
    if git tag -l | grep -qE "^${TAG}$"; then
        # We have a tag from this version, it means we need to make some special changes
        echo
        echo "Trying semi-automatic merge with heuristics from our own script."
        # Make sure we don't change anything in submodules
        git submodule deinit -f .

        ### Firstly we take care of RPM related files
        # RPM relnum must be kept, and NEXT_VERSION must be used, not the one from the merged branch
        # In specfiles
        perl -i -0pe "s/<<<<<<< HEAD
%define perfsonar_auto_version $NEXT_VERSION(|
%define perfsonar_auto_relnum .*)
=======
%define perfsonar_auto_version ${VERSION#v}(|
%define perfsonar_auto_relnum .*)
>>>>>>> ${VERSION}
/%define perfsonar_auto_version $NEXT_VERSION\1
/" $SPECFILES
        if ! grep -sE "^<<<<<<< HEAD$" $SPECFILES; then
            # All conflicts are solved
            git add $SPECFILES
        fi
        if [ "$MAKEFILES" ]; then
            # In Makefiles
            perl -i -0pe "s/<<<<<<< HEAD
PERFSONAR_AUTO_VERSION=$NEXT_VERSION(|
PERFSONAR_AUTO_RELNUM=.*)
=======
PERFSONAR_AUTO_VERSION=${VERSION#v}(|
PERFSONAR_AUTO_RELNUM=.*)
>>>>>>> ${VERSION}
/PERFSONAR_AUTO_VERSION=$NEXT_VERSION\1
/" $MAKEFILES
            if ! grep -sE "^<<<<<<< HEAD$" $MAKEFILES; then
                # All conflicts are solved
                git add $MAKEFILES
            fi
        fi
        if [ "$CONFFILES" ]; then
            # In configure.ac (TODO: add i2util support)
            perl -i -0pe "s/<<<<<<< HEAD
AC_INIT\(owamp, $NEXT_VERSION, owamp-bugs\@internet2.edu\)
=======
AC_INIT\(owamp, ${VERSION#v}, owamp-bugs\@internet2.edu\)
>>>>>>> ${VERSION}
/AC_INIT(owamp, $NEXT_VERSION, owamp-bugs\@internet2.edu)
/" $CONFFILES
            perl -i -0pe "s/<<<<<<< HEAD
AC_SUBST\(PATCH_LEVEL, 0.a1.0\)
=======
AC_SUBST\(PATCH_LEVEL, 1\)
>>>>>>> ${VERSION}
/AC_SUBST(PATCH_LEVEL, 0.a1.0)
/" $CONFFILES
            if ! grep -sE "^<<<<<<< HEAD$" $CONFFILES; then
                # All conflicts are solved
                git add $CONFFILES
            fi
        fi

        ### Secondly, Debian packaging related files
        # And correct the debian/changelog with the extraneous merged entries
        #HACK: Ignore external pscheduler packages with versions we want to leave alone
        directories=( $(find -E . -type d -path \*/unibuild-packaging/deb $FIND_IGNORE ) )
        if [[ "$GITREPO" == "pscheduler" ]]; then
            directories=( \
                $(find -E . -type d -path \*owamp/\*unibuild-packaging/deb $FIND_IGNORE ) \
                $(find -E . -type d -path \*pscheduler-\*/\*unibuild-packaging/deb $FIND_IGNORE ) \
                $(find -E . -type d -path \*python-pscheduler/\*unibuild-packaging/deb $FIND_IGNORE ) \
            )
            # We also need to skip the PDK changelogs
            git checkout -f $NEXT_VERSION -- scripts/PDK/templates/archiver/__PLUGIN_NAME__/unibuild-packaging/deb/changelog
            git checkout -f $NEXT_VERSION -- scripts/PDK/templates/test/__PLUGIN_NAME__/unibuild-packaging/deb/changelog
            git checkout -f $NEXT_VERSION -- scripts/PDK/templates/tool/__PLUGIN_NAME__/unibuild-packaging/deb/changelog
        elif [[ "$GITREPO" == "psconfig" ]]; then
            directories=( $(find -E . -type d -path \*psconfig\*/\*unibuild-packaging/deb $FIND_IGNORE ) )
        elif [[ "$GITREPO" == "perl-shared" ]]; then
            directories=( $(find -E . -type d -path \*libperfsonar\*/\*unibuild-packaging/deb $FIND_IGNORE ) )
        fi
        for dir in ${directories[@]}; do
            echo ""
            echo "Processing $dir"
            cd "$MYCWD"
            cd $dir
            echo "$PWD"
            MYDIR="."
            deb_correct_changelog
        done

        # Then, try to finalise merge
        git commit -m "Merging $TAG into $NEXT_VERSION"
    else
        die "Automatic merge failed, need to process manually."
    fi
fi

