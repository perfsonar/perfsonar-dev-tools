#!/usr/bin/env bash
#
# Merge an new patch release into an existing higher version branch
# We must be on the higher branch to run this
#
# Usage (if b>d):
#   git checkout a.b.c
#   ../perfsonar-dev-tools/bin/merge-repo-forward a.d.e

WHEREAMI=$(dirname $0)
. "${WHEREAMI}/common"

# Get version parameter
VERSION=$1
if [ -z "$VERSION" ]; then
    die "Must specify VERSION as command-line option"
fi

# Initialisations
MINOR=${VERSION%.*}
NEXT_VERSION=`git branch | grep \* | cut -d ' ' -f2`
if [[ $VERSION > $NEXT_VERSION ]]; then
    die "Current branch ($NEXT_VERSION) is lower than $VERSION"
fi

# Check if a tag from this branch already exists
if git tag -l | grep -qE "^v${VERSION}$"; then
    echo "A git tag already exists from this branch, I'll be merging the tag."
    VERSION="v$VERSION"
fi

# RPM files
SPECFILES=`find . -type f -name "*.spec*"`
MAKEFILES=`find . -type f -name Makefile`
CONFFILES=`find . -type f -name configure.ac`

# TODO: does this work when merging a non released branch?
# Try to merge patch branch into minor branch
if git merge -m "Merging $VERSION into $NEXT_VERSION" $VERSION; then
    # All is fine!
    exit 0
else
    if git tag -l | grep -qE "^${VERSION}$"; then
        # We have a tag from this version, it means we need to make some special changes
        # Make sure we don't change anything in submodules
        git submodule deinit -f .
        # RPM relnum must be kept, and NEXT_VERSION must be used, not the one from the merged branch
        # In specfiles
        perl -i -0pe "s/<<<<<<< HEAD
%define perfsonar_auto_version $NEXT_VERSION(|
%define perfsonar_auto_relnum .*)
=======
%define perfsonar_auto_version ${VERSION#v}(|
%define perfsonar_auto_relnum .*)
>>>>>>> ${VERSION}
/%define perfsonar_auto_version $NEXT_VERSION\1
/" $SPECFILES
        if ! grep -sE "^<<<<<<< HEAD$" $SPECFILES; then
            # All conflicts are solved
            git add $SPECFILES
        fi
        if [ "$MAKEFILES" ]; then
            # In Makefiles
            perl -i -0pe "s/<<<<<<< HEAD
PERFSONAR_AUTO_VERSION=$NEXT_VERSION(|
PERFSONAR_AUTO_RELNUM=.*)
=======
PERFSONAR_AUTO_VERSION=${VERSION#v}(|
PERFSONAR_AUTO_RELNUM=.*)
>>>>>>> ${VERSION}
/PERFSONAR_AUTO_VERSION=$NEXT_VERSION\1
/" $MAKEFILES
            if ! grep -sE "^<<<<<<< HEAD$" $MAKEFILES; then
                # All conflicts are solved
                git add $MAKEFILES
            fi
        fi
        if [ "$CONFFILES" ]; then
            # In configure.ac (TODO: add i2util support)
            perl -i -0pe "s/<<<<<<< HEAD
AC_INIT\(owamp, $NEXT_VERSION, owamp-bugs\@internet2.edu\)
=======
AC_INIT\(owamp, ${VERSION#v}, owamp-bugs\@internet2.edu\)
>>>>>>> ${VERSION}
/AC_INIT(owamp, $NEXT_VERSION, owamp-bugs\@internet2.edu)
/" $CONFFILES
            if ! grep -sE "^<<<<<<< HEAD$" $CONFFILES; then
                # All conflicts are solved
                git add $CONFFILES
            fi
        fi

        if [[ "${PWD##*\/}" == "pscheduler" ]]; then
            MYCWD=`pwd`
            # If we're in the pscheduler repo, we must loop on all packages
            for dir in `ls -1d pscheduler-* python-pscheduler | grep -v "pscheduler-rpm"`; do
                if [ -d "$dir/$dir" ]; then
                    MYDIR="$dir/$dir"
                elif [ -d "$dir/pscheduler" ]; then
                    MYDIR="$dir/pscheduler"
                else
                    MYDIR="$dir"
                fi
                deb_correct_changelog
                cd "$MYCWD"
            done
        else
            MYDIR="."
            deb_correct_changelog
        fi

        # Then, try to finalise merge
        git commit -m "Merging $VERSION into $NEXT_VERSION"
    else
        die "Automatic merge failed, need to process manually."
    fi
fi

